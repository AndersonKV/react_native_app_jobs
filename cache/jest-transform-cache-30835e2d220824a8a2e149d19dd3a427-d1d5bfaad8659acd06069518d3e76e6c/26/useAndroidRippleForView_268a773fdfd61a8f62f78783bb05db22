2c318c1543e866a271bb7a9cd4f83f39
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAndroidRippleForView;

var _invariant = _interopRequireDefault(require("invariant"));

var _ViewNativeComponent = require("../View/ViewNativeComponent");

var _reactNative = require("react-native");

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useAndroidRippleForView(rippleConfig, viewRef) {
  var _ref = rippleConfig != null ? rippleConfig : {},
      color = _ref.color,
      borderless = _ref.borderless,
      radius = _ref.radius,
      foreground = _ref.foreground;

  return (0, React.useMemo)(function () {
    if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= 21 && (color != null || borderless != null || radius != null)) {
      var processedColor = (0, _reactNative.processColor)(color);
      (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
      var nativeRippleValue = {
        type: 'RippleAndroid',
        color: processedColor,
        borderless: borderless === true,
        rippleRadius: radius
      };
      return {
        viewProps: foreground === true ? {
          nativeForegroundAndroid: nativeRippleValue
        } : {
          nativeBackgroundAndroid: nativeRippleValue
        },
        onPressIn: function onPressIn(event) {
          var view = viewRef.current;

          if (view != null) {
            var _event$nativeEvent$lo, _event$nativeEvent$lo2;

            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);

            _ViewNativeComponent.Commands.setPressed(view, true);
          }
        },
        onPressMove: function onPressMove(event) {
          var view = viewRef.current;

          if (view != null) {
            var _event$nativeEvent$lo3, _event$nativeEvent$lo4;

            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);
          }
        },
        onPressOut: function onPressOut(event) {
          var view = viewRef.current;

          if (view != null) {
            _ViewNativeComponent.Commands.setPressed(view, false);
          }
        }
      };
    }

    return null;
  }, [borderless, color, foreground, radius, viewRef]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VBbmRyb2lkUmlwcGxlRm9yVmlldyIsInJpcHBsZUNvbmZpZyIsInZpZXdSZWYiLCJjb2xvciIsImJvcmRlcmxlc3MiLCJyYWRpdXMiLCJmb3JlZ3JvdW5kIiwiUGxhdGZvcm0iLCJPUyIsIlZlcnNpb24iLCJwcm9jZXNzZWRDb2xvciIsIm5hdGl2ZVJpcHBsZVZhbHVlIiwidHlwZSIsInJpcHBsZVJhZGl1cyIsInZpZXdQcm9wcyIsIm5hdGl2ZUZvcmVncm91bmRBbmRyb2lkIiwibmF0aXZlQmFja2dyb3VuZEFuZHJvaWQiLCJvblByZXNzSW4iLCJldmVudCIsInZpZXciLCJjdXJyZW50IiwiQ29tbWFuZHMiLCJob3RzcG90VXBkYXRlIiwibmF0aXZlRXZlbnQiLCJsb2NhdGlvblgiLCJsb2NhdGlvblkiLCJzZXRQcmVzc2VkIiwib25QcmVzc01vdmUiLCJvblByZXNzT3V0Il0sInNvdXJjZXMiOlsidXNlQW5kcm9pZFJpcHBsZUZvclZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIE1ldGEgUGxhdGZvcm1zLCBJbmMuIGFuZCBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7Q29tbWFuZHN9IGZyb20gJy4uL1ZpZXcvVmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgdHlwZSB7Q29sb3JWYWx1ZX0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0JztcbmltcG9ydCB0eXBlIHtQcmVzc0V2ZW50fSBmcm9tICcuLi8uLi9UeXBlcy9Db3JlRXZlbnRUeXBlcyc7XG5pbXBvcnQge1BsYXRmb3JtLCBWaWV3LCBwcm9jZXNzQ29sb3J9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge3VzZU1lbW99IGZyb20gJ3JlYWN0JztcblxudHlwZSBOYXRpdmVCYWNrZ3JvdW5kUHJvcCA9ICRSZWFkT25seTx7fFxuICB0eXBlOiAnUmlwcGxlQW5kcm9pZCcsXG4gIGNvbG9yOiA/bnVtYmVyLFxuICBib3JkZXJsZXNzOiBib29sZWFuLFxuICByaXBwbGVSYWRpdXM6ID9udW1iZXIsXG58fT47XG5cbmV4cG9ydCB0eXBlIFJpcHBsZUNvbmZpZyA9IHt8XG4gIGNvbG9yPzogQ29sb3JWYWx1ZSxcbiAgYm9yZGVybGVzcz86IGJvb2xlYW4sXG4gIHJhZGl1cz86IG51bWJlcixcbiAgZm9yZWdyb3VuZD86IGJvb2xlYW4sXG58fTtcblxuLyoqXG4gKiBQcm92aWRlcyB0aGUgZXZlbnQgaGFuZGxlcnMgYW5kIHByb3BzIGZvciBjb25maWd1cmluZyB0aGUgcmlwcGxlIGVmZmVjdCBvblxuICogc3VwcG9ydGVkIHZlcnNpb25zIG9mIEFuZHJvaWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUFuZHJvaWRSaXBwbGVGb3JWaWV3KFxuICByaXBwbGVDb25maWc6ID9SaXBwbGVDb25maWcsXG4gIHZpZXdSZWY6IHt8Y3VycmVudDogbnVsbCB8IFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIFZpZXc+fH0sXG4pOiA/JFJlYWRPbmx5PHt8XG4gIG9uUHJlc3NJbjogKGV2ZW50OiBQcmVzc0V2ZW50KSA9PiB2b2lkLFxuICBvblByZXNzTW92ZTogKGV2ZW50OiBQcmVzc0V2ZW50KSA9PiB2b2lkLFxuICBvblByZXNzT3V0OiAoZXZlbnQ6IFByZXNzRXZlbnQpID0+IHZvaWQsXG4gIHZpZXdQcm9wczpcbiAgICB8ICRSZWFkT25seTx7fG5hdGl2ZUJhY2tncm91bmRBbmRyb2lkOiBOYXRpdmVCYWNrZ3JvdW5kUHJvcHx9PlxuICAgIHwgJFJlYWRPbmx5PHt8bmF0aXZlRm9yZWdyb3VuZEFuZHJvaWQ6IE5hdGl2ZUJhY2tncm91bmRQcm9wfH0+LFxufH0+IHtcbiAgY29uc3Qge2NvbG9yLCBib3JkZXJsZXNzLCByYWRpdXMsIGZvcmVncm91bmR9ID0gcmlwcGxlQ29uZmlnID8/IHt9O1xuXG4gIHJldHVybiB1c2VNZW1vKCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnICYmXG4gICAgICBQbGF0Zm9ybS5WZXJzaW9uID49IDIxICYmXG4gICAgICAoY29sb3IgIT0gbnVsbCB8fCBib3JkZXJsZXNzICE9IG51bGwgfHwgcmFkaXVzICE9IG51bGwpXG4gICAgKSB7XG4gICAgICBjb25zdCBwcm9jZXNzZWRDb2xvciA9IHByb2Nlc3NDb2xvcihjb2xvcik7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHByb2Nlc3NlZENvbG9yID09IG51bGwgfHwgdHlwZW9mIHByb2Nlc3NlZENvbG9yID09PSAnbnVtYmVyJyxcbiAgICAgICAgJ1VuZXhwZWN0ZWQgY29sb3IgZ2l2ZW4gZm9yIFJpcHBsZSBjb2xvcicsXG4gICAgICApO1xuXG4gICAgICBjb25zdCBuYXRpdmVSaXBwbGVWYWx1ZSA9IHtcbiAgICAgICAgdHlwZTogJ1JpcHBsZUFuZHJvaWQnLFxuICAgICAgICBjb2xvcjogcHJvY2Vzc2VkQ29sb3IsXG4gICAgICAgIGJvcmRlcmxlc3M6IGJvcmRlcmxlc3MgPT09IHRydWUsXG4gICAgICAgIHJpcHBsZVJhZGl1czogcmFkaXVzLFxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmlld1Byb3BzOlxuICAgICAgICAgIGZvcmVncm91bmQgPT09IHRydWVcbiAgICAgICAgICAgID8ge25hdGl2ZUZvcmVncm91bmRBbmRyb2lkOiBuYXRpdmVSaXBwbGVWYWx1ZX1cbiAgICAgICAgICAgIDoge25hdGl2ZUJhY2tncm91bmRBbmRyb2lkOiBuYXRpdmVSaXBwbGVWYWx1ZX0sXG4gICAgICAgIG9uUHJlc3NJbihldmVudDogUHJlc3NFdmVudCk6IHZvaWQge1xuICAgICAgICAgIGNvbnN0IHZpZXcgPSB2aWV3UmVmLmN1cnJlbnQ7XG4gICAgICAgICAgaWYgKHZpZXcgIT0gbnVsbCkge1xuICAgICAgICAgICAgQ29tbWFuZHMuaG90c3BvdFVwZGF0ZShcbiAgICAgICAgICAgICAgdmlldyxcbiAgICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQubG9jYXRpb25YID8/IDAsXG4gICAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LmxvY2F0aW9uWSA/PyAwLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIENvbW1hbmRzLnNldFByZXNzZWQodmlldywgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblByZXNzTW92ZShldmVudDogUHJlc3NFdmVudCk6IHZvaWQge1xuICAgICAgICAgIGNvbnN0IHZpZXcgPSB2aWV3UmVmLmN1cnJlbnQ7XG4gICAgICAgICAgaWYgKHZpZXcgIT0gbnVsbCkge1xuICAgICAgICAgICAgQ29tbWFuZHMuaG90c3BvdFVwZGF0ZShcbiAgICAgICAgICAgICAgdmlldyxcbiAgICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQubG9jYXRpb25YID8/IDAsXG4gICAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LmxvY2F0aW9uWSA/PyAwLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uUHJlc3NPdXQoZXZlbnQ6IFByZXNzRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgICBjb25zdCB2aWV3ID0gdmlld1JlZi5jdXJyZW50O1xuICAgICAgICAgIGlmICh2aWV3ICE9IG51bGwpIHtcbiAgICAgICAgICAgIENvbW1hbmRzLnNldFByZXNzZWQodmlldywgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LCBbYm9yZGVybGVzcywgY29sb3IsIGZvcmVncm91bmQsIHJhZGl1cywgdmlld1JlZl0pO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBVUE7O0FBQ0E7O0FBR0E7O0FBQ0E7Ozs7OztBQXFCZSxTQUFTQSx1QkFBVCxDQUNiQyxZQURhLEVBRWJDLE9BRmEsRUFVWDtFQUNGLFdBQWdERCxZQUFoRCxXQUFnREEsWUFBaEQsR0FBZ0UsRUFBaEU7RUFBQSxJQUFPRSxLQUFQLFFBQU9BLEtBQVA7RUFBQSxJQUFjQyxVQUFkLFFBQWNBLFVBQWQ7RUFBQSxJQUEwQkMsTUFBMUIsUUFBMEJBLE1BQTFCO0VBQUEsSUFBa0NDLFVBQWxDLFFBQWtDQSxVQUFsQzs7RUFFQSxPQUFPLG1CQUFRLFlBQU07SUFDbkIsSUFDRUMsc0JBQVNDLEVBQVQsS0FBZ0IsU0FBaEIsSUFDQUQsc0JBQVNFLE9BQVQsSUFBb0IsRUFEcEIsS0FFQ04sS0FBSyxJQUFJLElBQVQsSUFBaUJDLFVBQVUsSUFBSSxJQUEvQixJQUF1Q0MsTUFBTSxJQUFJLElBRmxELENBREYsRUFJRTtNQUNBLElBQU1LLGNBQWMsR0FBRywrQkFBYVAsS0FBYixDQUF2QjtNQUNBLHdCQUNFTyxjQUFjLElBQUksSUFBbEIsSUFBMEIsT0FBT0EsY0FBUCxLQUEwQixRQUR0RCxFQUVFLHlDQUZGO01BS0EsSUFBTUMsaUJBQWlCLEdBQUc7UUFDeEJDLElBQUksRUFBRSxlQURrQjtRQUV4QlQsS0FBSyxFQUFFTyxjQUZpQjtRQUd4Qk4sVUFBVSxFQUFFQSxVQUFVLEtBQUssSUFISDtRQUl4QlMsWUFBWSxFQUFFUjtNQUpVLENBQTFCO01BT0EsT0FBTztRQUNMUyxTQUFTLEVBQ1BSLFVBQVUsS0FBSyxJQUFmLEdBQ0k7VUFBQ1MsdUJBQXVCLEVBQUVKO1FBQTFCLENBREosR0FFSTtVQUFDSyx1QkFBdUIsRUFBRUw7UUFBMUIsQ0FKRDtRQUtMTSxTQUxLLHFCQUtLQyxLQUxMLEVBSzhCO1VBQ2pDLElBQU1DLElBQUksR0FBR2pCLE9BQU8sQ0FBQ2tCLE9BQXJCOztVQUNBLElBQUlELElBQUksSUFBSSxJQUFaLEVBQWtCO1lBQUE7O1lBQ2hCRSw4QkFBU0MsYUFBVCxDQUNFSCxJQURGLDJCQUVFRCxLQUFLLENBQUNLLFdBQU4sQ0FBa0JDLFNBRnBCLG9DQUVpQyxDQUZqQyw0QkFHRU4sS0FBSyxDQUFDSyxXQUFOLENBQWtCRSxTQUhwQixxQ0FHaUMsQ0FIakM7O1lBS0FKLDhCQUFTSyxVQUFULENBQW9CUCxJQUFwQixFQUEwQixJQUExQjtVQUNEO1FBQ0YsQ0FmSTtRQWdCTFEsV0FoQkssdUJBZ0JPVCxLQWhCUCxFQWdCZ0M7VUFDbkMsSUFBTUMsSUFBSSxHQUFHakIsT0FBTyxDQUFDa0IsT0FBckI7O1VBQ0EsSUFBSUQsSUFBSSxJQUFJLElBQVosRUFBa0I7WUFBQTs7WUFDaEJFLDhCQUFTQyxhQUFULENBQ0VILElBREYsNEJBRUVELEtBQUssQ0FBQ0ssV0FBTixDQUFrQkMsU0FGcEIscUNBRWlDLENBRmpDLDRCQUdFTixLQUFLLENBQUNLLFdBQU4sQ0FBa0JFLFNBSHBCLHFDQUdpQyxDQUhqQztVQUtEO1FBQ0YsQ0F6Qkk7UUEwQkxHLFVBMUJLLHNCQTBCTVYsS0ExQk4sRUEwQitCO1VBQ2xDLElBQU1DLElBQUksR0FBR2pCLE9BQU8sQ0FBQ2tCLE9BQXJCOztVQUNBLElBQUlELElBQUksSUFBSSxJQUFaLEVBQWtCO1lBQ2hCRSw4QkFBU0ssVUFBVCxDQUFvQlAsSUFBcEIsRUFBMEIsS0FBMUI7VUFDRDtRQUNGO01BL0JJLENBQVA7SUFpQ0Q7O0lBQ0QsT0FBTyxJQUFQO0VBQ0QsQ0F0RE0sRUFzREosQ0FBQ2YsVUFBRCxFQUFhRCxLQUFiLEVBQW9CRyxVQUFwQixFQUFnQ0QsTUFBaEMsRUFBd0NILE9BQXhDLENBdERJLENBQVA7QUF1REQifQ==