1c062890fc3d6f9cc7a6265535d83580
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Home = Home;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _bg = _interopRequireDefault(require("../../assets/bg.png"));

var _reactNative = require("react-native");

var _theme = require("../../theme");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Home(props) {
  var _useState = (0, _react.useState)(),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      jobs = _useState2[0],
      setJobs = _useState2[1];

  var windowHeight = _reactNative.Dimensions.get('window').height;

  return _react.default.createElement(_reactNative.View, {
    style: {
      flex: 1
    }
  }, _react.default.createElement(_reactNative.ImageBackground, {
    source: _bg.default,
    resizeMode: "cover",
    style: {
      flex: 1,
      justifyContent: 'center'
    }
  }, _react.default.createElement(_reactNative.View, {
    style: {
      zIndex: 10,
      backgroundColor: '#fff',
      width: '100%',
      padding: 30
    }
  }, _react.default.createElement(_reactNative.Text, {
    style: {
      fontWeight: 'bold',
      fontSize: 20,
      color: '#000'
    }
  }, "Opa novo por aqui :)"), _react.default.createElement(_reactNative.View, {
    style: {
      marginVertical: 20
    }
  }, _react.default.createElement(_reactNative.Button, {
    title: "Entrar como candidato",
    onPress: function onPress() {
      return props.navigation.navigate('LoginUser');
    }
  })), _react.default.createElement(_reactNative.Button, {
    title: "Entrar como empresa",
    color: _theme.theme.colors.backgroundRegister,
    onPress: function onPress() {
      return props.navigation.navigate('LoginCompany');
    }
  }))));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,